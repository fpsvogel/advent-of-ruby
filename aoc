#!/usr/bin/env ruby

require "fileutils"
require "clipboard"
require "httparty"
require "dotenv/load"
require "thor"
require "benchmark"
require "reverse_markdown"
require "yaml"

cli_files = File.join(File.dirname(__FILE__), "cli", "*.rb")
solution_files = File.join(File.dirname(__FILE__), "solutions", "**", "*.rb")
Dir[cli_files].each { |file| require file }
Dir[solution_files].each { |file| require file }

CONFIG = YAML.load(File.read("config.yml"))

# The CLI application
class Aoc < Thor
  desc "bootstrap YEAR DAY", "prepares a sample project for a given day and year:
downloads the input and instructions, creates a sample source and spec file"
  method_option :bootstrap, aliases: "-b"
  def bootstrap(year, day)
    year = "20#{year}" if year.length == 2

    InputFile.download(year, day)
    instructions_path = InstructionsFile.download(year, day)
    source_path = SourceFile.create(year, day)
    spec_path = SpecFile.create(year, day)
    puts "https://adventofcode.com/#{year}/day/#{day}"

    `#{CONFIG["editor_command"]} #{source_path}`
    `#{CONFIG["editor_command"]} #{spec_path}`
    `#{CONFIG["editor_command"]} #{instructions_path}`
  end

  # TODO add a [VARIANT] arg, so that additional versions of the same solution
  # can co-exist as additional methods, e.g.:
  #
  #   #part_1_first     # for my initial attempt
  #   #part_1_concise   # for a code-golf type solution
  #   #part_1_alt       # for an alternative approach
  desc "run YEAR DAY [PART]", "executes a given day, year, and optionally part"
  method_option :run_day, aliases: "-r"
  def run_day(year, day, part = :both)
    year = "20#{year}" if year.length == 2

    solution = Runner.load_solution(year, day)
    input_path = InputFile.download(year, day, notify_exists: false)
    url = "https://adventofcode.com/#{year}/day/#{day}"

    if part == "1" || part == :both
      Runner.run_part("Part One") { solution.part_1(File.new(input_path)) }
      puts
    end
    if part == "2" || part == :both
      Runner.run_part("Part Two") { solution.part_2(File.new(input_path)) }
      puts
    end

    puts url
  end

  desc "submit YEAR DAY PART", "submits an answer for a given day, year, and part"
  method_option :submit, aliases: "-s"
  def submit(year, day, part)
    year = "20#{year}" if year.length == 2

    solution = Runner.load_solution(year, day)
    return unless solution
    input_path = InputFile.download(year, day, notify_exists: false)
    answer = solution.send(:"part_#{part}", File.new(input_path))

    aoc_api = AocApi.new(ENV["AOC_COOKIE"])
    response = aoc_api.submit(year, day, part, answer)
    message = response.match(/(?<=<article>).+(?=<\/article>)/).to_s.strip
    markdown_message = ReverseMarkdown.convert(message)

    puts markdown_message

    # Re-download instructions when Part 2 may be unlocked.
    # TODO add a condition checking markdown_message for successful submission.
    # Example markdown_message:
    # "That's the right answer! You are one gold star closer to finding the sleigh keys. [[Continue to Part Two]](/2021/day/3#part2)"
    if part == "1"
      instructions_path = InstructionsFile.download(year, day, overwrite: true)
      `#{CONFIG["editor_command"]} #{instructions_path}`
    end
  end

  desc "others YEAR DAY PART", "downloads and shows other people's solutions"
  method_option :others, aliases: "-o"
  def others(year, day, part)
    year = "20#{year}" if year.length == 2

    padded_day = day.rjust(2, "0")
    file_path = File.join("others", year, "#{padded_day}.rb")

    InstructionsFile.download(year, day)

    if File.exist?(file_path)
      puts "#{file_path} already exists, skipping"
    else
      year_directory = File.join("others", year)
      FileUtils.mkdir_p(year_directory) if !Dir.exist?(year_directory)

      other_solutions = OtherSolutionsApi.new.other_solutions(year, day, part)
      File.write(file_path, other_solutions)
    end

    `#{CONFIG["editor_command"]} #{file_path}`
  end
end

Dotenv.load("#{__dir__}/.env")
Dotenv.require_keys("AOC_COOKIE")
Aoc.start
