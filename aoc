#!/usr/bin/env ruby

require 'httparty'
require 'dotenv/load'
require 'thor'
require 'benchmark'
require 'reverse_markdown'

cli_files = File.join(File.dirname(__FILE__), 'cli', '*.rb')
solution_files = File.join(File.dirname(__FILE__), 'solutions', '**', '*.rb')
Dir[cli_files].each { |file| require file }
Dir[solution_files].each { |file| require file }

# The CLI application
class Aoc < Thor
  desc 'bootstrap YEAR DAY', 'prepares a sample project for a given day:
downloads the input, creates a sample source and spec file'
  method_option :bootstrap, aliases: '-b'
  def bootstrap(year, day)
    year = "20#{year}" if year.length == 2
    PuzzleInput.download(year, day)
    PuzzleInstructions.download(year, day)
    Template.create_templates(year, day)
    puts "https://adventofcode.com/#{year}/day/#{day}"
  end

  desc 'instructions YEAR DAY', 'shows instructions for the given day/year'
  method_option :instructions
  def instructions(year, day)
    year = "20#{year}" if year.length == 2
    instructions = PuzzleInstructions.load(year, day)
    puts instructions
  end

  desc 'run YEAR DAY', 'executes a given day/year'
  method_option :run_day, aliases: '-r'
  def run_day(year, day)
    year = "20#{year}" if year.length == 2
    puzzle = PuzzleSource.create_puzzle(year, day)
    input_path = PuzzleInput.load(year, day)
    url = "https://adventofcode.com/#{year}/day/#{day}"
    PuzzleSource.run_part('Part One') { puzzle.part_1(input_path) }
    puts
    PuzzleSource.run_part('Part Two') { puzzle.part_2(input_path) }
    puts
    puts url
  end

  desc 'one YEAR DAY', 'executes the part_1 for a given day/year'
  method_option :one
  def one(year, day)
    year = "20#{year}" if year.length == 2
    puzzle = PuzzleSource.create_puzzle(year, day)
    input_path = PuzzleInput.load(year, day)
    url = "https://adventofcode.com/#{year}/day/#{day}"
    PuzzleSource.run_part('Part One') { puzzle.part_1(input_path) }
    puts url
  end

  desc 'two YEAR DAY', 'executes the part_2 for a given day/year'
  method_option :two
  def two(year, day)
    year = "20#{year}" if year.length == 2
    puzzle = PuzzleSource.create_puzzle(year, day)
    input_path = PuzzleInput.load(year, day)
    url = "https://adventofcode.com/#{year}/day/#{day}"
    PuzzleSource.run_part('Part Two') { puzzle.part_2(input_path) }
    puts url
  end

  desc 'submit YEAR DAY', 'submits an answer for a given day/year'
  method_option :submit
  def submit(year, day, part)
    year = "20#{year}" if year.length == 2
    puzzle = PuzzleSource.create_puzzle(year, day)
    return unless puzzle
    input_path = PuzzleInput.load(year, day)
    answer = puzzle.send(:"part_#{part}", input_path)

    aoc_api = AocApi.new(ENV['AOC_COOKIE'])
    response = aoc_api.submit(year, day, part, answer)
    message = response.match(/(?<=<article>).+(?=<\/article>)/).to_s.strip
    markdown_message = ReverseMarkdown.convert(message)

    puts markdown_message
  end
end

Dotenv.load("#{__dir__}/.env")
Dotenv.require_keys('AOC_COOKIE')
Aoc.start
